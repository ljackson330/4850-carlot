name: Carlot CI
on:
  push:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      # Pull the code from the GitHub repo
      - name: Checkout code
        uses: actions/checkout@v4
      # Install Python on the runner
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          # Version is specified in this file
          python-version-file: '.python-version'
      # Cache the Python build environment    
      - name: Cache Python dependencies
        uses: actions/cache@v4
        id: cache
        with:
          # Cache ./venv and name it os-venv-{requirements.txt hash}
          # This makes it so we use the same venv so long as requirements.txt doesn't change
          path: |
            venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements.txt') }}

      # Build new venv if the cache misses (if there's not a venv already built for this requirements.txt)    
      - name: Create venv and install deps
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          python -m venv venv
          venv/bin/pip install -r requirements.txt
          venv/bin/pip install pylint coverage
  
  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: '.python-version'

      # Use the cached venv    
      - name: Restore cached dependencies
        uses: actions/cache@v4
        with:
          path: |
            venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements.txt') }}
      
      - name: Run Pylint
        run: |
          find . -name "*.py" -not -path "./venv/*" > pylint_files.txt
          venv/bin/pylint --fail-under=5 $(cat pylint_files.txt)
  
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: '.python-version'
          
      - name: Restore cached dependencies
        uses: actions/cache@v4
        with:
          path: |
            venv
          key: ${{ runner.os }}-venv-${{ hashFiles('**/requirements.txt') }}
      
      - name: Create test directories
        run: |
          mkdir -p test-reports
          mkdir -p api-test-reports
      
      - name: Run Tests with Coverage
        run: |
          for file in $(find . -name "test_*.py" -not -path "./venv/*"); do
            venv/bin/coverage run --append --omit "*/site-packages/*,*/dist-packages/*,venv/*" "$file"
          done
          
          # Generate coverage report
          venv/bin/coverage report
      
      - name: Upload test results
        # Run even when tests fail
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            test-reports/
            api-test-reports/
             
  zip:
    name: Zip
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
                
      - name: Upload source code
        uses: actions/upload-artifact@v4
        with:
          name: carlot-build
          path: |
            **/*.py
